{"version":3,"sources":["components/styles/Controls.module.css","components/styles/Card.module.css","components/styles/Status.module.css","components/styles/Hand.module.css","components/Status.tsx","components/Controls.tsx","components/Card.tsx","components/Hand.tsx","components/App.tsx","index.tsx"],"names":["module","exports","Status","message","balance","className","styles","statusContainer","status","value","Controls","gameState","buttonState","betEvent","hitEvent","standEvent","resetEvent","useState","amount","setAmount","input","inputStyle","setInputStyle","useEffect","validation","inputError","amountChange","e","target","controlsContainer","betContainer","autoFocus","type","onChange","onClick","Math","round","button","disabled","hitDisabled","standDisabled","resetDisabled","Card","suit","hidden","hiddenCard","card","black","red","Hand","title","cards","handContainer","length","getTitle","cardContainer","map","index","key","App","GameState","Deal","Message","data","JSON","parse","stringify","jsonData","deck","setDeck","userCards","setUserCards","userScore","setUserScore","userCount","setUserCount","dealerCards","setDealerCards","dealerScore","setDealerScore","dealerCount","setDealerCount","setBalance","bet","setBet","setGameState","setMessage","setButtonState","init","drawCard","user","dealer","userTurn","hitStand","calculate","bust","dealerTurn","checkWin","dealType","randomIndex","floor","random","splice","console","log","dealCard","alert","push","setScore","total","forEach","Number","aces","filter","userWin","dealerWin","tie","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da45ecf5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlsContainer\":\"Controls_controlsContainer__1S1TU\",\"betContainer\":\"Controls_betContainer__1ZyjE\",\"input\":\"Controls_input__z7Ayf\",\"inputError\":\"Controls_inputError__FDIaN\",\"button\":\"Controls_button__28yK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__6G_gf\",\"hiddenCard\":\"Card_hiddenCard__36nOp\",\"black\":\"Card_black__1YXHy\",\"red\":\"Card_red__3x-Ad\",\"value\":\"Card_value__2Tilh\",\"suit\":\"Card_suit__1Gz4C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"Status_statusContainer__2Lhom\",\"status\":\"Status_status__2oYQw\",\"balance\":\"Status_balance__uvBo1\",\"value\":\"Status_value__1mN8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"handContainer\":\"Hand_handContainer__Rt4-x\",\"cardContainer\":\"Hand_cardContainer__zw0wd\",\"title\":\"Hand_title__3iMMk\"};","import React from 'react';\nimport styles from './styles/Status.module.css';\n\ntype StatusProps = {\n  message: string,\n  balance: number\n};\n\nconst Status: React.FC<StatusProps> = ({ message, balance }) => {\n  return (\n    <div className={styles.statusContainer}>\n      <div className={styles.status}>\n        <h1 className={styles.value}>{message}</h1>\n      </div>\n      <div className={styles.balance}>\n        <h1 className={styles.value}>${balance}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;","import React, { useState, useEffect } from 'react';\nimport styles from './styles/Controls.module.css';\n\ntype ControlsProps = {\n  balance: number,\n  gameState: number,\n  buttonState: any,\n  betEvent: any,\n  hitEvent: any,\n  standEvent: any,\n  resetEvent: any\n};\n\nconst Controls: React.FC<ControlsProps> = ({ balance, gameState, buttonState, betEvent, hitEvent, standEvent, resetEvent }) => {\n  const [amount, setAmount] = useState(10);\n  const [inputStyle, setInputStyle] = useState(styles.input);\n\n  useEffect(() => {\n    validation();\n  }, [amount, balance]);\n\n  const validation = () => {\n    if (amount > balance) {\n      setInputStyle(styles.inputError);\n      return false;\n    }\n    if (amount < 0.01) {\n      setInputStyle(styles.inputError);\n      return false;\n    }\n    setInputStyle(styles.input);\n    return true;\n  }\n\n  const amountChange = (e: any) => {\n    setAmount(e.target.value);\n  }\n\n  const onBetClick = () => {\n    if (validation()) {\n      betEvent(Math.round(amount * 100) / 100);\n    }\n  }\n\n  const getControls = () => {\n    if (gameState === 0) {\n      return (\n        <div className={styles.controlsContainer}>\n          <div className={styles.betContainer}>\n            <h4>Amount:</h4>\n            <input autoFocus type='number' value={amount} onChange={amountChange} className={inputStyle} />\n          </div>\n          <button onClick={() => onBetClick()} className={styles.button}>Bet</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className={styles.controlsContainer}>\n          <button onClick={() => hitEvent()} disabled={buttonState.hitDisabled} className={styles.button}>Hit</button>\n          <button onClick={() => standEvent()} disabled={buttonState.standDisabled} className={styles.button}>Stand</button>\n          <button onClick={() => resetEvent()} disabled={buttonState.resetDisabled} className={styles.button}>Reset</button>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <>\n      {getControls()}\n    </>\n  );\n}\n\nexport default Controls;","import React from 'react';\nimport styles from './styles/Card.module.css';\n\ntype CardProps = {\n  value: string;\n  suit: string;\n  hidden: boolean;\n};\n\nconst Card: React.FC<CardProps> = ({ value, suit, hidden }) => {\n  const getColor = () => {\n    if (suit === '♠' || suit === '♣') {\n      return styles.black;\n    }\n    else {\n      return styles.red;\n    }\n  }\n\n  const getCard = () => {\n    if (hidden) {\n      return (\n        <div className={styles.hiddenCard} />\n      );\n    }\n    else {\n      return (\n        <div className={styles.card}>\n          <div className={getColor()}>\n            <h1 className={styles.value}>{value}</h1>\n            <h1 className={styles.suit}>{suit}</h1>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <>\n      {getCard()}\n    </>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport styles from './styles/Hand.module.css';\nimport Card from './Card';\n\ntype HandProps = {\n  title: string,\n  cards: any[]\n};\n\nconst Hand: React.FC<HandProps> = ({ title, cards }) => {\n  const getTitle = () => {\n    if (cards.length > 0) {\n      return (\n        <h1 className={styles.title}>{title}</h1>\n      );\n    }\n  }\n  return (\n    <div className={styles.handContainer}>\n      {getTitle()}\n      <div className={styles.cardContainer}>\n        {cards.map((card: any, index: number) => {\n          return (\n            <Card key={index} value={card.value} suit={card.suit} hidden={card.hidden} />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Hand;","import React, { useState, useEffect } from 'react';\nimport Status from './Status';\nimport Controls from './Controls';\nimport Hand from './Hand';\nimport jsonData from '../deck.json';\n\nconst App: React.FC = () => {\n  enum GameState {\n    bet,\n    init,\n    userTurn,\n    dealerTurn\n  }\n\n  enum Deal {\n    user,\n    dealer,\n    hidden\n  }\n\n  enum Message {\n    bet = 'Place a Bet!',\n    hitStand = 'Hit or Stand?',\n    bust = 'You Lost!',\n    userWin = 'You Win!',\n    dealerWin = 'Dealer Wins!',\n    tie = 'Tie!'\n  }\n\n  const data = JSON.parse(JSON.stringify(jsonData.cards));\n  const [deck, setDeck]: any[] = useState(data);\n\n  const [userCards, setUserCards]: any[] = useState([]);\n  const [userScore, setUserScore] = useState(0);\n  const [userCount, setUserCount] = useState(0);\n\n  const [dealerCards, setDealerCards]: any[] = useState([]);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [dealerCount, setDealerCount] = useState(0);\n\n  const [balance, setBalance] = useState(100);\n  const [bet, setBet] = useState(0);\n\n  const [gameState, setGameState] = useState(GameState.bet);\n  const [message, setMessage] = useState(Message.bet);\n  const [buttonState, setButtonState] = useState({\n    hitDisabled: false,\n    standDisabled: false,\n    resetDisabled: true\n  });\n\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      drawCard(Deal.user);\n      drawCard(Deal.hidden);\n      drawCard(Deal.user);\n      drawCard(Deal.dealer);\n      setGameState(GameState.userTurn);\n      setMessage(Message.hitStand);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    calculate(userCards, setUserScore);\n    setUserCount(userCount + 1);\n  }, [userCards]);\n\n  useEffect(() => {\n    calculate(dealerCards, setDealerScore);\n    setDealerCount(dealerCount + 1);\n  }, [dealerCards]);\n\n  useEffect(() => {\n    if (gameState === GameState.userTurn) {\n      if (userScore === 21) {\n        buttonState.hitDisabled = true;\n        setButtonState({ ...buttonState });\n      }\n      else if (userScore > 21) {\n        bust();\n      }\n    }\n  }, [userCount]);\n\n  useEffect(() => {\n    if (gameState === GameState.dealerTurn) {\n      if (dealerScore >= 17) {\n        checkWin();\n      }\n      else {\n        drawCard(Deal.dealer);\n      }\n    }\n  }, [dealerCount]);\n\n  const resetGame = () => {\n    console.clear();\n    setDeck(data);\n\n    setUserCards([]);\n    setUserScore(0);\n    setUserCount(0);\n\n    setDealerCards([]);\n    setDealerScore(0);\n    setDealerCount(0);\n\n    setBet(0);\n\n    setGameState(GameState.bet);\n    setMessage(Message.bet);\n    setButtonState({\n      hitDisabled: false,\n      standDisabled: false,\n      resetDisabled: true\n    });\n  }\n\n  const placeBet = (amount: number) => {\n    setBet(amount);\n    setBalance(Math.round((balance - amount) * 100) / 100);\n    setGameState(GameState.init);\n  }\n\n  const drawCard = (dealType: Deal) => {\n    if (deck.length > 0) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      const card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log('Remaining Cards:', deck.length);\n      switch (card.suit) {\n        case 'spades':\n          dealCard(dealType, card.value, '♠');\n          break;\n        case 'diamonds':\n          dealCard(dealType, card.value, '♦');\n          break;\n        case 'clubs':\n          dealCard(dealType, card.value, '♣');\n          break;\n        case 'hearts':\n          dealCard(dealType, card.value, '♥');\n          break;\n        default:\n          break;\n      }\n    }\n    else {\n      alert('All cards have been drawn');\n    }\n  }\n\n  const dealCard = (dealType: Deal, value: string, suit: string) => {\n    switch (dealType) {\n      case Deal.user:\n        userCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setUserCards([...userCards]);\n        break;\n      case Deal.dealer:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': false });\n        setDealerCards([...dealerCards]);\n        break;\n      case Deal.hidden:\n        dealerCards.push({ 'value': value, 'suit': suit, 'hidden': true });\n        setDealerCards([...dealerCards]);\n        break;\n      default:\n        break;\n    }\n  }\n\n  const revealCard = () => {\n    dealerCards.filter((card: any) => {\n      if (card.hidden === true) {\n        card.hidden = false;\n      }\n      return card;\n    });\n    setDealerCards([...dealerCards])\n  }\n\n  const calculate = (cards: any[], setScore: any) => {\n    let total = 0;\n    cards.forEach((card: any) => {\n      if (card.hidden === false && card.value !== 'A') {\n        switch (card.value) {\n          case 'K':\n            total += 10;\n            break;\n          case 'Q':\n            total += 10;\n            break;\n          case 'J':\n            total += 10;\n            break;\n          default:\n            total += Number(card.value);\n            break;\n        }\n      }\n    });\n    const aces = cards.filter((card: any) => {\n      return card.value === 'A';\n    });\n    aces.forEach((card: any) => {\n      if (card.hidden === false) {\n        if ((total + 11) > 21) {\n          total += 1;\n        }\n        else if ((total + 11) === 21) {\n          if (aces.length > 1) {\n            total += 1;\n          }\n          else {\n            total += 11;\n          }\n        }\n        else {\n          total += 11;\n        }\n      }\n    });\n    setScore(total);\n  }\n\n  const hit = () => {\n    drawCard(Deal.user);\n  }\n\n  const stand = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setGameState(GameState.dealerTurn);\n    revealCard();\n  }\n\n  const bust = () => {\n    buttonState.hitDisabled = true;\n    buttonState.standDisabled = true;\n    buttonState.resetDisabled = false;\n    setButtonState({ ...buttonState });\n    setMessage(Message.bust);\n  }\n\n  const checkWin = () => {\n    if (userScore > dealerScore || dealerScore > 21) {\n      setBalance(Math.round((balance + (bet * 2)) * 100) / 100);\n      setMessage(Message.userWin);\n    }\n    else if (dealerScore > userScore) {\n      setMessage(Message.dealerWin);\n    }\n    else {\n      setBalance(Math.round((balance + (bet * 1)) * 100) / 100);\n      setMessage(Message.tie);\n    }\n  }\n\n  return (\n    <>\n      <Status message={message} balance={balance} />\n      <Controls\n        balance={balance}\n        gameState={gameState}\n        buttonState={buttonState}\n        betEvent={placeBet}\n        hitEvent={hit}\n        standEvent={stand}\n        resetEvent={resetGame}\n      />\n      <Hand title={`Dealer's Hand (${dealerScore})`} cards={dealerCards} />\n      <Hand title={`Your Hand (${userScore})`} cards={userCards} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}